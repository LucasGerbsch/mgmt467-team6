# -*- coding: utf-8 -*-
"""Unit 1Leonard Chiu DIVE

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DDWc22jcuBxrpdSpMlDfqoe8voaS7_SW

**Unit 1 Leonard Chiu DIVE**
"""

from google.colab import auth
from google.cloud import bigquery
import pandas as pd

# Authenticate to Google Cloud
auth.authenticate_user()

# Create a BigQuery client with your project ID
# Replace "your-gcp-project-id" with your actual Google Cloud project ID
client = bigquery.Client(project="mgmt-467-4677")

"""**Discover:**

Prompt: Display the first 5 rows of the thelook_ecommerce dataset using bigquery
"""

dataset_id = 'thelook_ecommerce'
dataset_ref = client.dataset(dataset_id, project='bigquery-public-data')
tables = list(client.list_tables(dataset_ref))

valid_tables = [table for table in tables if table.table_id != 'thelook_ecommerce-table']

for table in valid_tables:
  table_id = table.table_id
  query = f"SELECT * FROM `{table.project}.{table.dataset_id}.{table_id}` LIMIT 5"
  df = client.query(query).to_dataframe()
  print(f"Table: {table_id}")
  display(df)

"""3 KPIS:

KPI 1: find 90-day/Monthly Revenue Trend with MoM and YoY growth
Prompt: Generate me a bigquery code that will find 90-Day / Monthly Revenue Trend (with MoM & YoY Growth) using CTe/Window fuctions
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project mgmt-467-4677
# -- KPI 1: Revenue Trend and Growth
# WITH orders AS (
#   SELECT
#     order_id,
#     created_at,
#     sale_price
#   FROM `bigquery-public-data.thelook_ecommerce.order_items`
#   WHERE status = 'Complete'
# ),
# 
# monthly_revenue AS (
#   SELECT
#     DATE_TRUNC(created_at, MONTH) AS month_start,
#     SUM(sale_price) AS total_revenue
#   FROM orders
#   GROUP BY month_start
# ),
# 
# revenue_growth AS (
#   SELECT
#     month_start,
#     total_revenue,
#     LAG(total_revenue) OVER (ORDER BY month_start) AS prev_month_revenue,
#     LAG(total_revenue, 12) OVER (ORDER BY month_start) AS prev_year_revenue,
#     ROUND(((total_revenue - LAG(total_revenue) OVER (ORDER BY month_start)) / LAG(total_revenue) OVER (ORDER BY month_start)) * 100, 2) AS mom_growth_pct,
#     ROUND(((total_revenue - LAG(total_revenue, 12) OVER (ORDER BY month_start)) / LAG(total_revenue, 12) OVER (ORDER BY month_start)) * 100, 2) AS yoy_growth_pct
#   FROM monthly_revenue
# )
# 
# SELECT
#   month_start,
#   total_revenue,
#   mom_growth_pct,
#   yoy_growth_pct
# FROM revenue_growth
# ORDER BY month_start DESC;

"""KPI 2:
Repeat purchase rate

Prompt: Find me the repeat purchase rate of the same dataset
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project mgmt-467-4677
# -- KPI 2: Repeat Purchase Rate
# WITH user_orders AS (
#   SELECT
#     user_id,
#     DATE_TRUNC(created_at, MONTH) AS month_start,
#     COUNT(DISTINCT order_id) AS order_count
#   FROM `bigquery-public-data.thelook_ecommerce.order_items`
#   WHERE status = 'Complete'
#   GROUP BY user_id, month_start
# ),
# 
# monthly_rpr AS (
#   SELECT
#     month_start,
#     COUNTIF(order_count > 1) / COUNT(DISTINCT user_id) AS repeat_purchase_rate
#   FROM user_orders
#   GROUP BY month_start
# )
# 
# SELECT
#   month_start,
#   ROUND(repeat_purchase_rate * 100, 2) AS repeat_purchase_rate_pct
# FROM monthly_rpr
# ORDER BY month_start DESC;

"""KPI 3:
Average Order Value

Prompt: Now, find me the average order value within the same dataset.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project mgmt-467-4677
# -- KPI 3: Average Order Value
# WITH monthly_aov AS (
#   SELECT
#     DATE_TRUNC(created_at, MONTH) AS month_start,
#     SUM(sale_price) AS total_revenue,
#     COUNT(DISTINCT order_id) AS total_orders,
#     SAFE_DIVIDE(SUM(sale_price), COUNT(DISTINCT order_id)) AS avg_order_value
#   FROM `bigquery-public-data.thelook_ecommerce.order_items`
#   WHERE status = 'Complete'
#   GROUP BY month_start
# )
# 
# SELECT
#   month_start,
#   total_revenue,
#   total_orders,
#   ROUND(avg_order_value, 2) AS avg_order_value
# FROM monthly_aov
# ORDER BY month_start DESC;

"""**Investigate**

Product Category: Sweaters

Prompt: Give me the total revenue, number of orders, and average order value for sweaters grouped by different regions.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project mgmt-467-4677
# -- Deep Dive into Product Category: Sweaters
# WITH CategorySales AS (
#     SELECT
#         oi.order_id,
#         oi.created_at,
#         p.category,
#         u.state as region, -- Using state as a proxy for region
#         oi.sale_price as revenue, -- Using sale_price as revenue
#         1 as quantity -- Assuming each row in order_items is a quantity of 1 for simplicity
#     FROM `bigquery-public-data.thelook_ecommerce.order_items` oi
#     JOIN `bigquery-public-data.thelook_ecommerce.products` p ON oi.product_id = p.id
#     JOIN `bigquery-public-data.thelook_ecommerce.users` u ON oi.user_id = u.id
#     WHERE p.category = 'Sweaters'
# )
# SELECT
#     region,
#     SUM(revenue) AS total_revenue,
#     COUNT(DISTINCT order_id) AS num_orders,
#     ROUND(SAFE_DIVIDE(SUM(revenue), COUNT(DISTINCT order_id)), 2) AS avg_order_value
# FROM CategorySales
# GROUP BY region
# ORDER BY total_revenue DESC;

"""Top 10 locations by Sweater revenue:
Prompt: Create a query to find the top 10 locations that generate the most sweater revenue.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project mgmt-467-4677
# -- Top 10 Locations Generating the Most Sweater Revenue
# SELECT
#     u.state AS location,
#     SUM(oi.sale_price) AS total_sweater_revenue,
#     COUNT(DISTINCT oi.order_id) AS num_orders,
#     ROUND(SAFE_DIVIDE(SUM(oi.sale_price), COUNT(DISTINCT oi.order_id)), 2) AS avg_order_value
# FROM `bigquery-public-data.thelook_ecommerce.order_items` oi
# JOIN `bigquery-public-data.thelook_ecommerce.products` p ON oi.product_id = p.id
# JOIN `bigquery-public-data.thelook_ecommerce.users` u ON oi.user_id = u.id
# WHERE p.category = 'Sweaters'
# GROUP BY u.state
# ORDER BY total_sweater_revenue DESC
# LIMIT 10;

"""Top 10 Sweater revenue by browser:
Prompt: Create a query to find the total revenue by browser.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project mgmt-467-4677
# -- Total Revenue from Completed Orders by Browser (based on user's event data)
# SELECT
#     e.browser,
#     SUM(oi.sale_price) AS total_revenue,
#     COUNT(DISTINCT oi.order_id) AS num_orders,
#     ROUND(SAFE_DIVIDE(SUM(oi.sale_price), COUNT(DISTINCT oi.order_id)), 2) AS avg_order_value
# FROM `bigquery-public-data.thelook_ecommerce.order_items` oi
# JOIN `bigquery-public-data.thelook_ecommerce.users` u ON oi.user_id = u.id
# JOIN `bigquery-public-data.thelook_ecommerce.events` e ON u.id = e.user_id
# WHERE oi.status = 'Complete'
# GROUP BY e.browser
# ORDER BY total_revenue DESC
# LIMIT 10; -- Limiting to top 10 browsers for clarity

Customer Segment: Europe

"""Prompt: For customer segment europe, generate a prompt that displays category	total_revenue	num_orders	avg_order_value for that location."""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project mgmt-467-4677
# -- Deep Dive into Customer Segment: Europe
# WITH EuropeSales AS (
#     SELECT
#         oi.order_id,
#         oi.created_at,
#         p.category,
#         u.state as region, -- Using state as a proxy for region
#         oi.sale_price as revenue, -- Using sale_price as revenue
#         1 as quantity -- Assuming each row in order_items is a quantity of 1 for simplicity
#     FROM `bigquery-public-data.thelook_ecommerce.order_items` oi
#     JOIN `bigquery-public-data.thelook_ecommerce.products` p ON oi.product_id = p.id
#     JOIN `bigquery-public-data.thelook_ecommerce.users` u ON oi.user_id = u.id
#     WHERE u.state IN ('England', 'Germany', 'France', 'Spain', 'Italy', 'Netherlands', 'Belgium', 'Sweden', 'Norway', 'Denmark', 'Switzerland', 'Austria', 'Poland', 'Ireland', 'Scotland', 'Wales') -- Approximating Europe by including several European states
# )
# SELECT
#     category,
#     SUM(revenue) AS total_revenue,
#     COUNT(DISTINCT order_id) AS num_orders,
#     ROUND(SAFE_DIVIDE(SUM(revenue), COUNT(DISTINCT order_id)), 2) AS avg_order_value
# FROM EuropeSales
# GROUP BY category
# ORDER BY total_revenue DESC;

"""Total Revenue by Traffic Source by European Customers

Prompt: Create a query to display revenue by marketing channel for European customers.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project mgmt-467-4677
# -- Revenue by Marketing Channel for European Customers
# WITH EuropeanCustomers AS (
#     SELECT DISTINCT id
#     FROM `bigquery-public-data.thelook_ecommerce.users`
#     WHERE state IN ('England', 'Germany', 'France', 'Spain', 'Italy', 'Netherlands', 'Belgium', 'Sweden', 'Norway', 'Denmark', 'Switzerland', 'Austria', 'Poland', 'Ireland', 'Scotland', 'Wales') -- Approximating Europe
# ),
# 
# EuropeanOrders AS (
#     SELECT
#         oi.order_id,
#         oi.user_id,
#         oi.sale_price as revenue,
#         e.traffic_source as marketing_channel
#     FROM `bigquery-public-data.thelook_ecommerce.order_items` oi
#     JOIN EuropeanCustomers ec ON oi.user_id = ec.id
#     JOIN `bigquery-public-data.thelook_ecommerce.events` e ON oi.user_id = e.user_id -- Joining with events on user_id
#     WHERE oi.status = 'Complete'
# )
# 
# SELECT
#     marketing_channel,
#     SUM(revenue) AS total_revenue,
#     COUNT(DISTINCT order_id) AS num_orders,
#     ROUND(SAFE_DIVIDE(SUM(revenue), COUNT(DISTINCT order_id)), 2) AS avg_order_value
# FROM EuropeanOrders
# GROUP BY marketing_channel
# ORDER BY total_revenue DESC;

"""Total revenue by browser for European customers

Prompt: Create a query that displays the revenue by browser for European customers.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project mgmt-467-4677
# -- Revenue by Browser for European Customers
# WITH EuropeanCustomers AS (
#     SELECT DISTINCT id
#     FROM `bigquery-public-data.thelook_ecommerce.users`
#     WHERE state IN ('England', 'Germany', 'France', 'Spain', 'Italy', 'Netherlands', 'Belgium', 'Sweden', 'Norway', 'Denmark', 'Switzerland', 'Austria', 'Poland', 'Ireland', 'Scotland', 'Wales') -- Approximating Europe
# ),
# 
# EuropeanOrders AS (
#     SELECT
#         oi.order_id,
#         oi.user_id,
#         oi.sale_price as revenue,
#         e.browser
#     FROM `bigquery-public-data.thelook_ecommerce.order_items` oi
#     JOIN EuropeanCustomers ec ON oi.user_id = ec.id
#     JOIN `bigquery-public-data.thelook_ecommerce.events` e ON oi.user_id = e.user_id -- Joining with events on user_id
#     WHERE oi.status = 'Complete'
# )
# 
# SELECT
#     browser,
#     SUM(revenue) AS total_revenue,
#     COUNT(DISTINCT order_id) AS num_orders,
#     ROUND(SAFE_DIVIDE(SUM(revenue), COUNT(DISTINCT order_id)), 2) AS avg_order_value
# FROM EuropeanOrders
# GROUP BY browser
# ORDER BY total_revenue DESC;

"""Monthly revenue trend for European customers

Prompt: Create a query that displays monthly revenue from European customers.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project mgmt-467-4677
# -- Monthly Revenue from European Customers
# WITH EuropeanCustomers AS (
#     SELECT DISTINCT id
#     FROM `bigquery-public-data.thelook_ecommerce.users`
#     WHERE state IN ('England', 'Germany', 'France', 'Spain', 'Italy', 'Netherlands', 'Belgium', 'Sweden', 'Norway', 'Denmark', 'Switzerland', 'Austria', 'Poland', 'Ireland', 'Scotland', 'Wales') -- Approximating Europe
# ),
# 
# EuropeanOrders AS (
#     SELECT
#         oi.order_id,
#         oi.user_id,
#         oi.created_at,
#         oi.sale_price as revenue
#     FROM `bigquery-public-data.thelook_ecommerce.order_items` oi
#     JOIN EuropeanCustomers ec ON oi.user_id = ec.id
#     WHERE oi.status = 'Complete'
# )
# 
# SELECT
#     DATE_TRUNC(created_at, MONTH) AS month_start,
#     SUM(revenue) AS total_revenue,
#     COUNT(DISTINCT order_id) AS num_orders,
#     COUNT(DISTINCT user_id) AS unique_customers,
#     ROUND(SAFE_DIVIDE(SUM(revenue), COUNT(DISTINCT order_id)), 2) AS avg_order_value
# FROM EuropeanOrders
# GROUP BY month_start
# ORDER BY month_start ASC;

"""**Validate:**

Cross-check #1: Verify top browser revenue for European customers
Original AI insight: "Chrome generates the most revenue in Europe"
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project mgmt-467-4677
# -- Verify top browser revenue for European customers
# WITH EuropeanCustomers AS (
#     SELECT DISTINCT id
#     FROM `bigquery-public-data.thelook_ecommerce.users`
#     WHERE state IN ('England', 'Germany', 'France', 'Spain', 'Italy', 'Netherlands', 'Belgium', 'Sweden', 'Norway', 'Denmark', 'Switzerland', 'Austria', 'Poland', 'Ireland', 'Scotland', 'Wales') -- Approximating Europe
# ),
# 
# EuropeanOrders AS (
#     SELECT
#         oi.order_id,
#         oi.user_id,
#         oi.sale_price as revenue,
#         e.browser
#     FROM `bigquery-public-data.thelook_ecommerce.order_items` oi
#     JOIN EuropeanCustomers ec ON oi.user_id = ec.id
#     JOIN `bigquery-public-data.thelook_ecommerce.events` e ON oi.user_id = e.user_id -- Joining with events on user_id
#     WHERE oi.status = 'Complete'
# )
# 
# SELECT
#     browser,
#     SUM(revenue) AS total_revenue
# FROM EuropeanOrders
# GROUP BY browser
# ORDER BY total_revenue DESC
# LIMIT 5;

""" Cross-check #2: Verify monthly revenue for European customers
 Original AI insight: "Revenue has been steadily increasing month-over-month"
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project mgmt-467-4677
# -- Verify monthly revenue for European customers
# WITH EuropeanCustomers AS (
#     SELECT DISTINCT id
#     FROM `bigquery-public-data.thelook_ecommerce.users`
#     WHERE state IN ('England', 'Germany', 'France', 'Spain', 'Italy', 'Netherlands', 'Belgium', 'Sweden', 'Norway', 'Denmark', 'Switzerland', 'Austria', 'Poland', 'Ireland', 'Scotland', 'Wales') -- Approximating Europe
# ),
# 
# EuropeanOrders AS (
#     SELECT
#         oi.order_id,
#         oi.user_id,
#         oi.created_at,
#         oi.sale_price as revenue
#     FROM `bigquery-public-data.thelook_ecommerce.order_items` oi
#     JOIN EuropeanCustomers ec ON oi.user_id = ec.id
#     WHERE oi.status = 'Complete'
# )
# 
# SELECT
#     DATE_TRUNC(created_at, MONTH) AS month_start,
#     SUM(revenue) AS total_revenue
# FROM EuropeanOrders
# GROUP BY month_start
# ORDER BY month_start ASC;

"""Revenue has NOT been steadily increasing monthly.

**Misleading Cross-Check:**

Misleading AI insight: "All European customers use the same browser patterns"
 Correction: We need to break it down by region and browser

Prompt: Show me a new query where you break down the top browser by revenue for each specific European region.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project mgmt-467-4677
# -- Revenue by Region and Browser for European Customers
# WITH EuropeanCustomers AS (
#     SELECT DISTINCT id, state
#     FROM `bigquery-public-data.thelook_ecommerce.users`
#     WHERE state IN ('England', 'Germany', 'France', 'Spain', 'Italy', 'Netherlands', 'Belgium', 'Sweden', 'Norway', 'Denmark', 'Switzerland', 'Austria', 'Poland', 'Ireland', 'Scotland', 'Wales') -- Approximating Europe
# ),
# 
# EuropeanOrders AS (
#     SELECT
#         oi.order_id,
#         oi.user_id,
#         oi.sale_price as revenue,
#         e.browser,
#         ec.state as region
#     FROM `bigquery-public-data.thelook_ecommerce.order_items` oi
#     JOIN EuropeanCustomers ec ON oi.user_id = ec.id
#     JOIN `bigquery-public-data.thelook_ecommerce.events` e ON oi.user_id = e.user_id -- Joining with events on user_id
#     WHERE oi.status = 'Complete'
# )
# 
# SELECT
#     region,
#     browser,
#     SUM(revenue) AS total_revenue,
#     COUNT(DISTINCT order_id) AS num_orders,
#     ROUND(SAFE_DIVIDE(SUM(revenue), COUNT(DISTINCT order_id)), 2) AS avg_order_value
# FROM EuropeanOrders
# GROUP BY region, browser
# ORDER BY total_revenue DESC;

"""In different regions, the top browser is different. We cannot generalize that Chrome is the top browser for ALL of Europe.

**Extend:**

Plotly chart:

Prompt: Create an interactive plotly chart to display sweaters revenue by region in descending order.
"""

import pandas as pd

df_sweaters = pd.read_gbq("""
    SELECT u.state as region, SUM(oi.sale_price) AS total_revenue
    FROM `bigquery-public-data.thelook_ecommerce.order_items` oi
    JOIN `bigquery-public-data.thelook_ecommerce.products` p ON oi.product_id = p.id
    JOIN `bigquery-public-data.thelook_ecommerce.users` u ON oi.user_id = u.id
    WHERE p.category = 'Sweaters'
    GROUP BY u.state
""", project_id="mgmt-467-4677")

import plotly.express as px
import plotly.io as pio

# Set Plotly to render in the browser (offline)
pio.renderers.default = "colab"

# Sort df_sweaters by descending total_revenue
df_sweaters_sorted = df_sweaters.sort_values(by='total_revenue', ascending=False)

# Create the bar chart
fig = px.bar(
    df_sweaters_sorted,
    x='region',
    y='total_revenue',
    title='Total Sweater Revenue by Region',
    labels={'region': 'Region', 'total_revenue': 'Total Revenue'}
)

# Show the chart in your default web browser
fig.show()

# Save the chart as an HTML file for offline viewing
fig.write_html("sweater_revenue_by_region.html")
print("Chart saved as sweater_revenue_by_region.html")

"""**Recommendation:**

I recommend expanding more into the Chinese market for sweater sales. 3 of the top 5 highest total sweater by revenue regions are found in China (Guandong, Beijing, and Henan), which means that there is a high demand of sweaters in those regions. In addition, the highest total revenue region, Guandong, is more than 10k more than the second highest region. Investing in the Chinese country and especially Guandong can bring grow the sweater market that is already enormous.

Another recommendation is Korea and USA; Gyeongii-do and Seoul for Korea and Texas and New York for the USA are in the top grossing regions for sweater revenue. Those locations can be value corners to expand the sweater category.

**DIVE reflection:**

It was important that I checked my code again for any misleads. I could not generalize that Chrome was the "best" browser for Europe; many different regions had different top browsers. It's important to always double-check AI's work as it could be overgeneralized and hide certain trends. Using AI as a tool to speed up coding tasks is worthwhile, but it's important to understand the number and output the model outputs.
"""